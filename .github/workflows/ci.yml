name: Elemental Transmutator CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy matplotlib scipy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run integration tests
      run: |
        cd prototyping
        python integration_test.py
    
    - name: Run validation tests  
      run: |
        cd prototyping
        python validation_test.py
    
    - name: Run quick demo (mock mode)
      run: |
        cd prototyping
        python quick_demo_ascii.py --mock
    
    - name: Run cost analysis
      run: |
        cd prototyping
        python cost_efficiency_analyzer.py
    
    - name: Run system check
      run: |
        cd prototyping
        python system_check.py

  windows-test:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy matplotlib scipy
    
    - name: Run Windows compatibility tests
      run: |
        cd prototyping
        python system_check.py
        python quick_demo_ascii.py --mock
    
    - name: Check encoding compatibility
      run: |
        cd prototyping
        python safe_demo.py --mock 2>&1 | findstr /C:"encoding error" && exit 1 || exit 0

  cost-analysis:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy matplotlib scipy
    
    - name: Generate cost efficiency report
      run: |
        cd prototyping
        python cost_efficiency_analyzer.py > cost_analysis_report.txt
    
    - name: Upload cost analysis
      uses: actions/upload-artifact@v3
      with:
        name: cost-analysis-report
        path: prototyping/cost_analysis_report.txt
    
    - name: Check economic viability
      run: |
        cd prototyping
        python -c "
        from cost_efficiency_analyzer import CostEfficiencyAnalyzer, ProductionMetrics
        analyzer = CostEfficiencyAnalyzer()
        metrics = ProductionMetrics()
        comparison = analyzer.scenario_comparison(metrics)
        viable_scenarios = [name for name, data in comparison['scenarios'].items() 
                           if data['breakeven']['economically_viable']]
        print(f'Economically viable scenarios: {len(viable_scenarios)}/4')
        if len(viable_scenarios) == 0:
            print('WARNING: No scenarios are currently economically viable')
            exit(1)
        else:
            print(f'Best scenario: {comparison[\"best_scenario\"]}')
            exit(0)
        "
